Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def sigmoid(X):
    return 1 / (1 + np.exp(-X))


class Network:
    def __init__(self, weights, biases, X, y):
        self.weights = weights
        self.biases = biases
        self.X = X
        self.y = y

    def forward(self):
        A = deepcopy(self.X)  # stores activations from previous layer
        for l in range(len(self.weights)):  # iterate over layers
            Z = self.weights[l] @ A + self.biases[l]
            A = sigmoid(Z)
        return A

    def loss(self):
        # log loss
        yhat = self.forward()
        return - (1 / len(self.y)) * (self.y * np.log(yhat) + (1 - self.y) * np.log(1 - yhat)).sum()

    def plot(self):
        plt.scatter(X[y==0], y[y==0], c="b", label="Class 0")
        plt.scatter(X[y==1], y[y==1], c="r", label="Class 1")
        plt.plot(X.T, network.forward().T, color="k", label="Neural Network")
        plt.legend()
        plt.xlabel("x")
        plt.ylabel("y")


n = 51
X = np.linspace(-1, 1, 51).reshape(1, n)
y = ((X < -0.5) | (X > 0.5)).reshape(1, n)

weights = [np.array([-7.8751, -8.3499]).reshape(2, 1), np.array([5.0297, -4.0937]).reshape(1, 2)]
biases = [np.array([-3.9181, 3.8380]).reshape(2, 1), np.array([1.6347]).reshape(1, 1)]
network = Network(weights, biases, X, y)
network.plot()

print(f"Original loss: {network.loss():.3f}")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[2], line 40[0m
[1;32m     38[0m biases [38;5;241m=[39m [np[38;5;241m.[39marray([[38;5;241m-[39m[38;5;241m3.9181[39m, [38;5;241m3.8380[39m])[38;5;241m.[39mreshape([38;5;241m2[39m, [38;5;241m1[39m), np[38;5;241m.[39marray([[38;5;241m1.6347[39m])[38;5;241m.[39mreshape([38;5;241m1[39m, [38;5;241m1[39m)]
[1;32m     39[0m network [38;5;241m=[39m Network(weights, biases, X, y)
[0;32m---> 40[0m [43mnetwork[49m[38;5;241;43m.[39;49m[43mplot[49m[43m([49m[43m)[49m
[1;32m     42[0m [38;5;28mprint[39m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mOriginal loss: [39m[38;5;132;01m{[39;00mnetwork[38;5;241m.[39mloss()[38;5;132;01m:[39;00m[38;5;124m.3f[39m[38;5;132;01m}[39;00m[38;5;124m"[39m)

Cell [0;32mIn[2], line 25[0m, in [0;36mNetwork.plot[0;34m(self)[0m
[1;32m     24[0m [38;5;28;01mdef[39;00m [38;5;21mplot[39m([38;5;28mself[39m):
[0;32m---> 25[0m     [43mplt[49m[38;5;241m.[39mscatter(X[y[38;5;241m==[39m[38;5;241m0[39m], y[y[38;5;241m==[39m[38;5;241m0[39m], c[38;5;241m=[39m[38;5;124m"[39m[38;5;124mb[39m[38;5;124m"[39m, label[38;5;241m=[39m[38;5;124m"[39m[38;5;124mClass 0[39m[38;5;124m"[39m)
[1;32m     26[0m     plt[38;5;241m.[39mscatter(X[y[38;5;241m==[39m[38;5;241m1[39m], y[y[38;5;241m==[39m[38;5;241m1[39m], c[38;5;241m=[39m[38;5;124m"[39m[38;5;124mr[39m[38;5;124m"[39m, label[38;5;241m=[39m[38;5;124m"[39m[38;5;124mClass 1[39m[38;5;124m"[39m)
[1;32m     27[0m     plt[38;5;241m.[39mplot(X[38;5;241m.[39mT, network[38;5;241m.[39mforward()[38;5;241m.[39mT, color[38;5;241m=[39m[38;5;124m"[39m[38;5;124mk[39m[38;5;124m"[39m, label[38;5;241m=[39m[38;5;124m"[39m[38;5;124mNeural Network[39m[38;5;124m"[39m)

[0;31mNameError[0m: name 'plt' is not defined
NameError: name 'plt' is not defined

